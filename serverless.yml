service: seoul-demo-reminder

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-northeast-2
  stage: ${opt:stage, 'dev'}
  environment:
    IS_LOCAL: ${env:IS_LOCAL}
    DYNAMO_AWS_ACCESS_KEY: ${env:DYNAMO_AWS_ACCESS_KEY}
    DYNAMO_AWS_SECRET_ACCESS_KEY: ${env:DYNAMO_AWS_SECRET_ACCESS_KEY}
    DYNAMO_AWS_REGION: ${env:DYNAMO_AWS_REGION}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cloudformation:Describe*
        - cloudformation:List*
        - cloudformation:Get*
        - cloudformation:CreateStack
        - cloudformation:UpdateStack
        - cloudformation:DeleteStack
        - cloudformation:CreateChangeSet
        - cloudformation:ExecuteChangeSet
        - cloudformation:DeleteChangeSet
        - cloudformation:ValidateTemplate
      Resource: '*'
    - Effect: Allow
      Action:
        - lambda:*
      Resource: '*'
    - Effect: Allow
      Action:
        - s3:CreateBucket
        - s3:ListBucket
        - s3:GetBucketLocation
        - s3:DeleteBucket
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
        # @see https://github.com/serverless/serverless/issues/5919
        - s3:GetEncryptionConfiguration
        - s3:PutEncryptionConfiguration
        - s3:DeleteBucketPolicy
      Resource: '*'
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:DeleteLogGroup
        - logs:CreateLogStream
        - logs:DeleteLogStream
        - logs:PutLogEvents
        - logs:DescribeLogGroups
        - logs:DescribeLogStreams
        - logs:TagResource
      Resource: '*'
    - Effect: Allow
      Action:
        - apigateway:GET
        - apigateway:POST
        - apigateway:PUT
        - apigateway:DELETE
      Resource: '*'
    - Effect: Allow
      Action:
        - iam:GetRole
        - iam:DeleteRolePolicy
        - iam:CreateRole
        - iam:DeleteRole
        - iam:PutRolePolicy
        - iam:PassRole
      Resource: '*'
    - Effect: Allow
      Action:
        - states:*
      Resource: '*'
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/notice'

functions:
  # 3시간마다 실행되는 스케줄러
  storeDemoInfos:
    handler: src/handler.storeDemoInfos
    events:
      - schedule: rate(3 hours)
      # 개발용 엔드포인트
      - http:
          path: store-demo-infos
          method: get
          cors: true

plugins:
  - serverless-dotenv-plugin
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-tscpaths
  - serverless-dynamodb-local

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true

  dotenv:
    path: .env.${self:provider.stage}
